name: C/C++ CI

on:
  push:
    paths-ignore: 
      - "README.md"
      - "LICENSE"
      - "CppJsLibJs.js"
      - ".gitignore"
      - ".github/workflows/release.yml"
      - ".github/workflows/codeql-analysis.yml"

env:
  BUILD_TYPE: Release

jobs:
  build:

    runs-on: ${{matrix.os}}

    strategy:
      matrix:
        #os: [ ubuntu-latest, windows-latest, macOs-latest ]
         os: [ ubuntu-20.04, macOs-latest ]
         options: [ openssl, boost, all, none ]

    steps:
    - uses: actions/checkout@v1

    # Set enable/disable tls support
    - name: enable/disable ssl support
      run: |
        if [ "${{matrix.options}}" = 'all' ] || [ "${{matrix.options}}" = 'openssl' ]; then
          echo "::set-output name=value::FALSE"
        else
          echo "::set-output name=value::TRUE"
        fi
      id: ssl_support
      shell: bash

    # Install boost on every system
    - name: install boost ubuntu
      run: sudo apt-get install libboost-all-dev -y
      if: matrix.os == 'ubuntu-20.04' && (matrix.options == 'boost' || matrix.options == 'all')
    - name: install boost macOs
      run: brew install boost
      if: matrix.os == 'macOs-latest' && (matrix.options == 'boost' || matrix.options == 'all')
    - name: install boost windows
      if: matrix.os == 'windows-latest' && (matrix.options == 'boost' || matrix.options == 'all')
      uses: MarkusJx/install-boost@v1.0
      id: install-boost
      with:
        boost_version: 1.71.0
        toolset: msvc14.2

    # Install openssl
    - name: install openssl macOs
      run: brew install openssl
      if: matrix.os == 'macOs-latest' && (matrix.options == 'openssl' || matrix.options == 'all')
    - name: install openssl windows
      run: choco install openssl -y
      if: matrix.os == 'windows-latest' && (matrix.options == 'openssl' || matrix.options == 'all')

    # Run cmake configure
    - name: cmake windows
      run: cmake . -B build
      if: matrix.os == 'windows-latest'
      env:
        BOOST_ROOT: ${{steps.install-boost.outputs.BOOST_ROOT}}
    - name: cmake not windows
      run: cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DNO_SSL=${{steps.ssl_support.outputs.value}} . -B build
      if: matrix.os != 'windows-latest'

    # Build
    - name: build
      run: cmake --build build --config ${{env.BUILD_TYPE}}
    #- name: run test
    #  shell: bash
    #  working-directory: ./test
    #  run: ./Test

  # Download the dependencies using conan and build
  build-conan:

    runs-on: ${{matrix.os}}

    strategy:
      matrix:
         os: [ ubuntu-latest, windows-latest ]

    steps:
    - uses: actions/checkout@v1
    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.0
    - name: Run conan install
      run: conan install . --build=missing -g cmake
    - name: Run cmake
      run: cmake . -B build -DCMAKE_BUILD_TYPE=Release -DUSE_CONAN=TRUE
    - name: Build
      run: cmake --build build --config Release
