cmake_minimum_required(VERSION 3.12)
project(CppJsLib)

set(CMAKE_CXX_STANDARD 17)

file(GLOB source
        "*.cpp"
        "*.hpp"
        )

option(HTTPS "Enable https support" FALSE)
option(ENABLE_WEBSOCKET "Enable websocket protocol support" FALSE)

add_compile_definitions(_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS) # Silence all Boost deprecation warnings
add_compile_definitions(COMPILATION)

find_file(HTTPLIB httplib.h HINTS ${CMAKE_SOURCE_DIR}/include)
find_file(JSON json.hpp HINTS ${CMAKE_SOURCE_DIR}/include)

if (${JSON} MATCHES ${CMAKE_SOURCE_DIR}/include)
    message(STATUS "json.hpp found in include folder")
else ()
    message(STATUS "json.hpp not found in include folder, downloading it")
    file(DOWNLOAD https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp include/json.hpp SHOW_PROGRESS STATUS JSON_DOWNLOAD)
    if (JSON_DOWNLOAD)
        message(STATUS "json.hpp download finished successfully")
    else()
        message(FATAL_ERROR "json.hpp download failed. Cannot continue without it")
    endif()
endif ()

if (${HTTPLIB} MATCHES ${CMAKE_SOURCE_DIR}/include)
    message(STATUS "httplib.h found in include folder")
else ()
    message(STATUS "httplib.h not found in include folder, downloading it")
    file(DOWNLOAD https://raw.githubusercontent.com/yhirose/cpp-httplib/master/httplib.h include/httplib.h SHOW_PROGRESS STATUS HTTPLIB_DOWNLOAD)
    if (HTTPLIB_DOWNLOAD)
        message(STATUS "httplib.h download finished successfully")
    else()
        message(FATAL_ERROR "httplib.h download failed. Cannot continue without it")
    endif()
endif ()

find_path(WEBSOCKETPP websocketpp HINTS ${CMAKE_SOURCE_DIR}/include)
if (NOT EXISTS ${WEBSOCKETPP})
    message(WARNING "Could not find websocketpp, disabling SSL Support")
    set(ENABLE_WEBSOCKET FALSE)
else ()
    message(STATUS "Websocketpp found: ${WEBSOCKETPP}/websocketpp")
endif ()

if (ENABLE_WEBSOCKET)
    if (WIN32)
        if (DEFINED ENV{GITHUB_ACTIONS})
            message(STATUS "Building with gh actions, setting BOOST_1_69 to include folder")
            set(BOOST_DIR ${CMAKE_SOURCE_DIR}/include/boost_1_69_0)
        elseif (DEFINED ENV{BOOST_1_69})
            message(STATUS "Boost variable defined: $ENV{BOOST_1_69}")
            set(BOOST_DIR $ENV{BOOST_1_69})
        else ()
            message(STATUS "BOOST_1_69 variable not defined, searching for Boost")
            find_path(BOOST_DIR boost_1_69_0 HINTS "C:")
            set(BOOST_DIR "${BOOST_DIR}/boost_1_69_0")
        endif ()

        if (EXISTS ${BOOST_DIR}/stage/lib)
            message(STATUS "${BOOST_DIR} exists, building with websocket protocol support")
            add_compile_definitions(CPPJSLIB_ENABLE_WEBSOCKET)

            set(BOOST_INCLUDE_DIRS ${BOOST_DIR})
            set(BOOST_LIBRARY_DIRS "${BOOST_DIR}/stage/lib")
        else ()
            message(WARNING "${BOOST_DIR} does not exist, building without websocket protocol support")
            set(ENABLE_WEBSOCKET FALSE)
        endif ()
    else ()
        find_package(Boost)
        if (Boost_FOUND)
            message(STATUS "BOOST found, building with websocket protocol support")

            add_compile_definitions(CPPJSLIB_ENABLE_WEBSOCKET)
            set(BOOST_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
            set(BOOST_LIBRARY_DIRS ${Boost_LIBRARY_DIRS})
        else ()
            message(WARNING "Boost not found, building without websocket protocol support")
            set(ENABLE_WEBSOCKET FALSE)
        endif ()
    endif ()
else ()
    message(STATUS "Building without websocket protocol support")
endif ()

if (HTTPS)
    message(STATUS "Building with HTTPS support")
    if (WIN32)
        if (DEFINED OPENSSL_PATH)
            message(STATUS "OPENSSL_PATH set to ${OPENSSL_PATH}, enabling SSL Support")
            set(OPENSSL_DIR ${OPENSSL_PATH})
        elseif (DEFINED ENV{GITHUB_ACTIONS})
            message(STATUS "Building on GH Actions, searching OpenSSL in include folder")
            set(OPENSSL_DIR ${CMAKE_SOURCE_DIR})
        else ()
            find_path(OPENSSL_DIR OpenSSL HINTS "C:")
            if (EXISTS "${OPENSSL_DIR}/OpenSSL-Win64")
                set(OPENSSL_DIR "${OPENSSL_DIR}/OpenSSL-Win64")
            elseif (EXISTS "${OPENSSL_DIR}/OpenSSL")
                set(OPENSSL_DIR "${OPENSSL_DIR}/OpenSSL")
            endif ()
        endif ()

        if (DEFINED OPENSSL_DIR)
            if (EXISTS ${OPENSSL_DIR})
                set(OPENSSL_INCLUDE_DIR "${OPENSSL_DIR}/include")
                set(OPENSSL_SSL_LIBRARY "${OPENSSL_DIR}/lib")
                add_compile_definitions(CPPJSLIB_ENABLE_HTTPS)
                message(STATUS "OpenSSL directory found: ${OPENSSL_DIR}, enabling SSL Support")
            else ()
                message(WARNING "${OPENSSL_DIR} does not exist, building without SSL Support")
                set(HTTPS FALSE)
            endif ()
        else ()
            message(WARNING "OpenSSL not found building without SSL Support")
            set(HTTPS FALSE)
        endif ()
    else ()
        find_package(OpenSSL)
        if (OPENSSL_FOUND)
            message(STATUS "OpenSSL found, building with SSL Support")
            add_compile_definitions(CPPJSLIB_ENABLE_HTTPS)
        else ()
            set(HTTPS FALSE)
            message(WARNING "OpenSSL was not found on this machine, building without SSL Support")
        endif ()
    endif ()
endif ()

add_library(CppJsLib SHARED "${source}")

target_include_directories(CppJsLib PUBLIC ${CMAKE_SOURCE_DIR}/include ${OPENSSL_INCLUDE_DIR} ${BOOST_INCLUDE_DIRS})
target_link_directories(CppJsLib PUBLIC ${BOOST_LIBRARY_DIRS} ${OPENSSL_SSL_LIBRARY})

if (ENABLE_WEBSOCKET)
    if (WIN32)
        target_compile_options(CppJsLib PRIVATE "/bigobj")
    else ()
        target_link_libraries(CppJsLib boost_system)
    endif ()
endif ()

if (HTTPS)
    if (WIN32)
        find_library(LIBCRYPTO libcrypto HINTS ${OPENSSL_SSL_LIBRARY})
        find_library(LIBSSL libssl HINTS ${OPENSSL_SSL_LIBRARY})
    else ()
        find_library(LIBCRYPTO crypto HINTS ${OPENSSL_SSL_LIBRARY})
        find_library(LIBSSL ssl HINTS ${OPENSSL_SSL_LIBRARY})
    endif ()

    if (EXISTS ${LIBSSL} AND EXISTS ${LIBCRYPTO})
        message(STATUS "Found libssl: ${LIBSSL} and libcrypto: ${LIBCRYPTO}")
        target_link_libraries(CppJsLib ${LIBCRYPTO} ${LIBSSL})
    else ()
        message(FATAL_ERROR "Libssl (${LIBSSL}) or libcrypto (${LIBCRYPTO}) do not exist")
    endif ()
endif ()

file(REMOVE_RECURSE $<TARGET_FILE_DIR:CppJsLib>/CppJsLibJs)

add_custom_command(TARGET CppJsLib PRE_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/CppJsLibJs $<TARGET_FILE_DIR:CppJsLib>/CppJsLibJs)