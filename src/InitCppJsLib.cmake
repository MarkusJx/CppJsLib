# Initialize CppJsLib
# Usage: initCppJsLib(target_name source_dir include_dir <ENABLE_WEBSOCKET> <ENABLE_HTTPS>)
function(initCppJsLib target source_dir include_dir)
    add_compile_definitions(_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS) # Silence all Boost deprecation warnings
    add_compile_definitions(COMPILATION)
    add_compile_definitions(CPPJSLIB_STATIC_DEFINE)

    find_file(HTTPLIB httplib.h HINTS ${include_dir})
    find_file(JSON json.hpp HINTS ${include_dir})

    message(STATUS "CppJsLib include folder was set to ${include_dir}")

    if (ARGV3)
        message(STATUS "Setting ENABLE_WEBSOCKET to ${ARGV3}")
        set(ENABLE_WEBSOCKET ${ARGV3})
    endif ()

    if (ARGV4)
        message(STATUS "Setting HTTPS to ${ARGV4}")
        set(HTTPS ${ARGV4})
    endif ()

    if (${JSON} MATCHES ${include_dir})
        message(STATUS "json.hpp found in include folder")
    else ()
        message(STATUS "json.hpp not found in include folder, downloading it")
        file(DOWNLOAD https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp ${include_dir}/json.hpp SHOW_PROGRESS STATUS JSON_DOWNLOAD)
        if (JSON_DOWNLOAD)
            message(STATUS "json.hpp download finished successfully")
        else ()
            message(FATAL_ERROR "json.hpp download failed. Cannot continue without it")
        endif ()
    endif ()

    if (${HTTPLIB} MATCHES ${include_dir})
        message(STATUS "httplib.h found in include folder")
    else ()
        message(STATUS "httplib.h not found in include folder, downloading it")
        file(DOWNLOAD https://raw.githubusercontent.com/yhirose/cpp-httplib/master/httplib.h ${include_dir}/httplib.h SHOW_PROGRESS STATUS HTTPLIB_DOWNLOAD)
        if (HTTPLIB_DOWNLOAD)
            message(STATUS "httplib.h download finished successfully")
        else ()
            message(FATAL_ERROR "httplib.h download failed. Cannot continue without it")
        endif ()
    endif ()

    if (ENABLE_WEBSOCKET)
        find_path(WEBSOCKETPP websocketpp HINTS ${include_dir})
        if (NOT EXISTS ${WEBSOCKETPP})
            message(WARNING "Could not find websocketpp, disabling SSL Support")
            set(ENABLE_WEBSOCKET FALSE)
        else ()
            message(STATUS "Websocketpp found: ${WEBSOCKETPP}/websocketpp")
        endif ()
    endif ()


    if (ENABLE_WEBSOCKET)
        if (WIN32)
            if (DEFINED ENV{BOOST_ROOT})
                message(STATUS "BOOST_ROOT defined: $ENV{BOOST_ROOT}")
                if (NOT EXISTS $ENV{BOOST_ROOT})
                    message(WARNING "$ENV{BOOST_ROOT} does not exist")
                    set(USE_BOOST FALSE)
                else ()
                    set(USE_BOOST TRUE)
                endif ()
            else ()
                message(WARNING "BOOST_ROOT is not defined")
                set(USE_BOOST FALSE)
            endif ()
        else ()
            set(USE_BOOST TRUE)
        endif ()

        if (USE_BOOST)
            set(BOOT_VERSION_LIST "1.69;1.68;1.67;1.66;1.65.1;1.65;1.64;1.63;1.62;1.61;1.60")
            message(STATUS "Searching suitable Boost version")
            foreach (BOOST_VERSION ${BOOT_VERSION_LIST})
                find_package(Boost ${BOOST_VERSION} EXACT)
                if (Boost_FOUND)
                    message(STATUS "Found suitable Boost version: ${BOOST_VERSION}")
                    break()
                endif ()
            endforeach ()

            if (Boost_FOUND)
                message(STATUS "Boost found, building with websocket protocol support")

                add_compile_definitions(CPPJSLIB_ENABLE_WEBSOCKET)
                set(BOOST_INCLUDE_DIRS ${Boost_INCLUDE_DIRS})
                set(BOOST_LIBRARY_DIRS ${Boost_LIBRARY_DIRS})
            else ()
                message(WARNING "Boost not found, building without websocket protocol support")
                set(ENABLE_WEBSOCKET FALSE)
            endif ()
        else ()
            message(WARNING "Boost not found, building without websocket protocol support")
            set(ENABLE_WEBSOCKET FALSE)
        endif ()
    else ()
        message(STATUS "Building without websocket protocol support")
    endif ()

    if (HTTPS)
        message(STATUS "Building with HTTPS support")
        if (WIN32)
            if (DEFINED OPENSSL_PATH)
                message(STATUS "OPENSSL_PATH set to ${OPENSSL_PATH}, enabling SSL Support")
                set(OPENSSL_DIR ${OPENSSL_PATH})
            elseif (DEFINED ENV{GITHUB_ACTIONS})
                message(STATUS "Building on GH Actions, searching OpenSSL in include folder")
                set(OPENSSL_DIR ${CMAKE_SOURCE_DIR})
            else ()
                find_path(OPENSSL_DIR OpenSSL HINTS "C:")
                if (EXISTS "${OPENSSL_DIR}/OpenSSL-Win64")
                    set(OPENSSL_DIR "${OPENSSL_DIR}/OpenSSL-Win64")
                elseif (EXISTS "${OPENSSL_DIR}/OpenSSL")
                    set(OPENSSL_DIR "${OPENSSL_DIR}/OpenSSL")
                endif ()
            endif ()

            if (DEFINED OPENSSL_DIR)
                if (EXISTS ${OPENSSL_DIR})
                    set(OPENSSL_INCLUDE_DIR "${OPENSSL_DIR}/include")
                    set(OPENSSL_SSL_LIBRARY "${OPENSSL_DIR}/lib")
                    add_compile_definitions(CPPJSLIB_ENABLE_HTTPS)
                    message(STATUS "OpenSSL directory found: ${OPENSSL_DIR}, enabling SSL Support")
                else ()
                    message(WARNING "${OPENSSL_DIR} does not exist, building without SSL Support")
                    set(HTTPS FALSE)
                endif ()
            else ()
                message(WARNING "OpenSSL not found, building without SSL Support")
                set(HTTPS FALSE)
            endif ()
        else ()
            find_package(OpenSSL)
            if (OPENSSL_FOUND)
                message(STATUS "OpenSSL found, building with SSL Support")
                add_compile_definitions(CPPJSLIB_ENABLE_HTTPS)
            else ()
                find_library(CRYPTO crypto)
                find_library(SSL ssl)
                if (EXISTS ${SSL} AND EXISTS ${CRYPTO})
                    message(STATUS "find_package did not find openssl, but libssl and libcrypto were found")
                    message(WARNING "Trying to build without openssl include folder, if the build fails, try disabling HTTPS Support")
                    set(OPENSSL_INCLUDE_DIR "")
                else ()
                    set(HTTPS FALSE)
                    message(WARNING "OpenSSL was not found on this machine, building without SSL Support")
                    set(OPENSSL_INCLUDE_DIR "")
                endif ()
            endif ()
        endif ()
    endif ()

    target_include_directories(${target} PUBLIC ${include_dir} ${OPENSSL_INCLUDE_DIR} ${BOOST_INCLUDE_DIRS})
    if (DEFINED BOOST_LIBRARY_DIRS OR DEFINED OPENSSL_SSL_LIBRARY)
        target_link_directories(${target} PUBLIC ${BOOST_LIBRARY_DIRS} ${OPENSSL_SSL_LIBRARY})
    else ()
        message(STATUS "No library includes were defined, not linking anything")
    endif ()


    if (ENABLE_WEBSOCKET)
        if (WIN32)
            target_compile_options(${target} PRIVATE "/bigobj")
        else ()
            target_link_libraries(${target} boost_system)

            if ((CMAKE_CXX_COMPILER_ID STREQUAL "GNU") AND CYGWIN)
                message(STATUS "Compiler supports -Wa,-mbig-obj")
                target_compile_options(${target} PRIVATE "-Wa,-mbig-obj")
            endif ()
        endif ()
    endif ()

    if (HTTPS)
        if (WIN32)
            find_library(LIBCRYPTO libcrypto HINTS ${OPENSSL_SSL_LIBRARY})
            find_library(LIBSSL libssl HINTS ${OPENSSL_SSL_LIBRARY})
        else ()
            find_library(LIBCRYPTO crypto HINTS ${OPENSSL_SSL_LIBRARY})
            find_library(LIBSSL ssl HINTS ${OPENSSL_SSL_LIBRARY})
        endif ()

        if (EXISTS ${LIBSSL} AND EXISTS ${LIBCRYPTO})
            message(STATUS "Found libssl: ${LIBSSL} and libcrypto: ${LIBCRYPTO}")
            target_link_libraries(${target} ${LIBCRYPTO} ${LIBSSL})
        else ()
            message(FATAL_ERROR "Libssl (${LIBSSL}) or libcrypto (${LIBCRYPTO}) do not exist")
        endif ()
    endif ()

    message(STATUS "CppJsLib subdirectory: ${source_dir}/")

    set(base_sources ${source_dir}/CppJsLib.cpp ${source_dir}/CppJsLib.hpp)

    FILE(GLOB utils
            "${source_dir}/utils/*.hpp"
            "${source_dir}/utils/*.cpp"
            )

    if (NOT WIN32)
        target_link_libraries(${target} pthread)
    endif ()

    target_sources(${target} PRIVATE ${base_sources} ${utils})
    target_include_directories(${target} PRIVATE ${source_dir})
endfunction()